using Statistics
using DataFrames, GLM
using JLD2
using FileIO
using GLMakie
using PerceptualColourMaps
using ReactingTracers
using FFTW
GLMakie.activate!(inline=false)

# find max|<c'>|
# find K_eff
# find <c'^2>/<c>^2

# NOTE WITH u = 0, cs is <c> = 1 + c' whist with u != 0, cs = c'

stat_type = 4 # 1: find range|<c>|, 2: find K_eff, 3: find ⟨<c'^2>(x)/(<c>^2(x)⟩, 4: find <c>, 5: find mean(<c>) - √(1-|Δ|^2), 6: find error d<uc>/dx - λ⟨c⟩(1-⟨c⟩/(1+Δ(x))), 7: find <c'2>/<c^2>, 8: find max(⟨c⟩) 9: find min(⟨c⟩)
plot_type = 3 # 1: plot with mag on x, 2: plot with u on x, 3: plot with κ\λ on x
line_variable = 1 # 1: plot with mag, 2: plot with u, 3: plot with both mag and u, 4: plot with κ/λ # code doesn't work with 3 yet...

markers = ['o', 'x', '+', '*', 's', 'd'] #, "hexagon", "cross", "xcross", "utriangle", "dtriangle"];

# setup grid
x_length = 1024
x = nodes(x_length, a = -pi, b = pi)
k  = wavenumbers(x_length)

magnitudes = [0.7]

lambdas = sort([0.1, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.5, 3, 3.5, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 100.0])

#lambdas = sort([0.1, 1.0, 10, 0.5, 1.5, 0.3, 0.4, 0.6, 0.7, 0.8, 0.9, 1.1, 1.2, 1.3, 1.4, 2.5, 3, 5, 6]) #[0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.5, 2, 2.5, 3, 10, 100])
#lambdas = sort([1.0, 0.5, 1.5, 0.3, 0.4, 0.6, 0.7, 0.8, 0.9, 1.1, 1.2, 1.3, 1.4, 2.5, 3, 5, 6]) #[0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.5, 2, 2.5, 3, 10, 100])
velocities = [1.0] #, 10, 100]
varu = 1
κ = 0.001

mag_choice_indx = 3
lambda_or_kappa_choice_indx = 3
vel_choice_indx = 1


function specify_colours(num_colours)
    colours = cmap("Gouldian", N = num_colours)
    return colours
end

function axis_labels(stat_type)
    if stat_type == 1
        y_label = "range⟨c⟩"
    elseif stat_type == 2
        y_label = L"\Kappa_{eff}"
    elseif stat_type == 3
        y_label = "max⟨c'^2⟩/⟨c⟩^2"
    elseif stat_type == 4
        y_label = "<c>"
    elseif stat_type == 5
        y_label = "(mean(<c>) - √(1-|Δ|^2))/√(1-|Δ|^2)"
    elseif stat_type == 6
        y_label = "||(d<uc>/dx - λ⟨c⟩(1-⟨c⟩/(1+Δ(x)))||/||λ⟨c⟩(1-⟨c⟩/(1+Δ(x)))||"
    elseif stat_type == 8
        y_label = "max⟨c⟩"
    elseif stat_type == 9
        y_label = "min⟨c⟩"
    end
    return y_label
end

function obtain_stat_means(stat_type, c_mean, flux_mean, c_squared_mean, gc, mag, λ, k)
    if stat_type == 1
        stat = maximum(c_mean) - minimum(c_mean)
    elseif stat_type == 2
        model = lm(@formula(y ~ x), DataFrame(x=gc[:], y=flux_mean[:]))
        coeffs = coef(model)  
        stat = -coeffs[2]
    elseif stat_type == 3
        stat = mean(abs.(c_squared_mean .- c_mean.^2)./c_mean.^2)
    elseif stat_type ==4
        stat = mean(c_mean[:])
    elseif stat_type == 5 # compare mean(<c>) to √(1-|Δ|^2)
        stat = (mean(c_mean[:]) - sqrt(1-mag^2))/sqrt(1-mag^2)
    elseif stat_type == 6 # compare rms error of d<uc>/dx and λ⟨c⟩(1-⟨c⟩/(1+Δ(x)))
        ∇uc = real(ifft(im*k[:,1].*fft(flux_mean)))[:];
        λc = (λ*c_mean.*(1 .- c_mean./(1 .+ mag*cos.(x))))[:]
        stat = sqrt(mean((∇uc .- λc).^2))/sqrt(mean(λc.^2))
    elseif stat_type == 8
        stat = maximum(c_mean)
    elseif stat_type == 9
        stat = minimum(c_mean)
    end
    return stat
end

function axis_title(stat_type, plot_type)
    if stat_type == 1
        stat_type_lab = "range_c_"
    elseif stat_type == 2
        stat_type_lab = "k_eff_"
    elseif stat_type == 3
        stat_type_lab = "c_prime_square_over_c_squared_"
    elseif stat_type == 4
        stat_type_lab = "mean_c_prime_"
    elseif stat_type == 5
        stat_type_lab = "mean_c_to_delta_"
    elseif stat_type == 6
        stat_type_lab = "flux_to_guess_"
    elseif stat_type == 8
        stat_type_lab = "max_c_"
    elseif stat_type == 9
        stat_type_lab = "min_c_"
    end
    if line_variable !=3
        if plot_type !=1 && line_variable !=1
            fixed_var = "|Δ| = " * string(magnitudes[mag_choice_indx])
        elseif plot_type !=2 && line_variable !=2
            fixed_var = "U = " * string(velocities[vel_choice_indx])
        else
            if varu == 0
                fixed_var = "κ = " * string(lambdas[lambda_or_kappa_choice_indx])
            else
                fixed_var = "λ = " * string(lambdas[lambda_or_kappa_choice_indx])
            end
        end
    else
        fixed_var = ""
    end

    if plot_type == 1
        plot_lab = "mag_on_x_"
    elseif plot_type == 2 || line_variable == 2
        plot_lab = "U_on_x_"
    else
        if varu == 0
            plot_lab = "κ_on_x_"
        else
            plot_lab = "λ_on_x_"
        end
    end

    title = stat_type_lab * plot_lab * fixed_var * ".png"
    return title
end

n_indx = 1

# load in the data
matrix = zeros(length(lambdas), length(magnitudes), length(velocities));
for l_indx in 1:length(lambdas)
    for m_indx = 1:length(magnitudes)
        mag = magnitudes[m_indx]
        for n_indx = 1:length(velocities)              
            if varu == 0
                #load_name = "mag_" * string(mag) * "_k_" * string(round(div; sigdigits =  3)) * "_kappa_" * string(kappas[kappa_indx]) * "_nou_FT.jld2"
                data_folder = "data/u_0"
                data_name = "mag_" * string(mag) * "_U_" * string(velocities[n_indx]) * "_lambda_" * string(lambdas[l_indx]) * ".jld2"
                load_name = joinpath(data_folder, data_name)
                try
                    @load load_name cs cf
                    var = obtain_stat(stat_type, cs, cf)
                catch systemerror
                    print("no file named" * data_name)
                    var = 0
                end                    
            else
                data_folder = "data/new_scaling/"
                if κ == 0.001
                    data_name = data_name = "mag_" * string(mag) * "_U_" * string(velocities[n_indx]) * "_lambda_" * string(lambdas[l_indx]) * "_k_0.001.jld2"
                else
                    data_name = data_name = "mag_" * string(mag) * "_U_" * string(velocities[n_indx]) * "_lambda_" * string(lambdas[l_indx]) * ".jld2"
                end
                # Concatenate the folder and file name to get the full path
                load_name = joinpath(data_folder, data_name)
                try
                    @load load_name c_mean flux_mean c_squared_mean gc
                    var = obtain_stat_means(stat_type, c_mean, flux_mean, c_squared_mean, gc, mag, lambdas[l_indx], k)
                    matrix[l_indx, m_indx, n_indx] = var
                catch systemerror
                    print("no file named " * data_name)
                    var = 0
                end              
            end
            #print("n_indx=" * string(n_indx))
            
        end
    end
end
matrix = replace(matrix) do x
    x == 0 ? NaN : x
end

line_options = (; linewidth = 10, markersize = 30)

fig = Figure(resolution = (3024, 1964),
xlabelsize = 22, ylabelsize = 22, xgridstyle = :dash, ygridstyle = :dash, xtickalign = 1,
xticksize = 10, ytickalign = 1, yticksize = 10, xlabelpadding = -10)
four_panels = [1, 1, 2, 2, 1, 2, 1, 2]
if plot_type == 3 #&& varu == 0
    if stat_type == 1 || stat_type == 3
        ax = Axis(fig[1, 1], xscale = log10) #, yscale = log10)
    else
        ax = Axis(fig[1, 1], xscale = log10)
    end
elseif stat_type ==3
    ax = Axis(fig[1, 1], yscale = log10)
else
    ax = Axis(fig[1, 1]) #, yscale = log10)
    #ax = Axis(fig[1, 1], yscale = log10)
end

# sizes
legendsize = 30;
axlabelsize = 30;
axtitlesize = 40;

# plot the data
if plot_type == 1 # Δ on x
    if line_variable == 2
        for indx = 1:length(velocities)
            colours = specify_colours(length(velocities))
            scatterlines!(magnitudes, matrix[lambda_or_kappa_choice_indx, :, indx], label = "U = " * string(velocities[indx]), color = colours[indx]; line_options...)
        end
    elseif line_variable == 4
        for indx = 1:length(lambdas)
            colours = specify_colours(length(lambdas))
            if varu == 0
                scatterlines!(magnitudes, matrix[indx, :, vel_choice_indx], label = "κ = " * string(lambdas[indx]), color = colours[indx]; line_options...)
            else
                scatterlines!(magnitudes, matrix[indx, :, vel_choice_indx], label = "λ = " * string(lambdas[indx]), color = colours[indx]; line_options...)
            end
        end        
    ax.xlabel = "|Δ|"
    end
elseif plot_type == 2 # U on x
    if line_variable == 1
        for indx = 1:length(magnitudes)
            colours = specify_colours(length(magnitudes))
            scatterlines!(velocities, matrix[lambda_or_kappa_choice_indx, indx, :], label = "|Δ| = " * string(magnitudes[indx]), color = colours[indx]; line_options...)
        end
    elseif kappa_variable == 4
        for indx = 1:length(lambdas)
            colours = specify_colours(length(lambdas))
            if varu == 0
                scatterlines!(velocities, matrix[indx, mag_choice_indx, :], label = "κ = " * string(lambdas[indx]), color = colours[indx]; line_options...)
            else
                scatterlines!(velocities, matrix[indx, mag_choice_indx, :], label = "λ = " * string(lambdas[indx]), color = colours[indx]; line_options...)
            end
        end    
    end
    ax.xlabel = "U"
else # λ or κ on x
    if line_variable == 1
        for indx = 1:length(magnitudes)
            if length(magnitudes) == 1
                colours = specify_colours(2)
            else
                colours = specify_colours(length(magnitudes))
            end
            scatterlines!(lambdas, matrix[:, indx, vel_choice_indx], label = "|Δ| = " * string(magnitudes[indx]), color = colours[indx]; line_options...) 
        end      
    elseif line_variable ==2
        for indx = 1:length(velocities)
            colours = specify_colours(length(velocities))
            scatterlines!(kappas, matrix[:, mag_choice_indx, indx], label = "U = " * string(velocities[indx]), color = colours[indx]; line_options...)
        end
    else
        for mag_indx = 1:length(magnitudes)
            colours = specify_colours(length(velocities))
            for k_indx = 1:length(velocities)
                scatterlines!(lambdas, matrix[:, mag_indx, k_indx], label = "U = " * string(velocities[k_indx]) *  ", |Δ| = " * string(magnitudes[mag_indx]), color = colours[k_indx], marker = markers[mag_indx]; line_options...)
            end
        end
    end
    if varu == 0
        ax.xlabel = "κ"
    else
        ax.xlabel = "λ"
    end
end

if line_variable !=3
    if plot_type !=1 && line_variable !=1
        ax.title = "|Δ| = " * string(magnitudes[mag_choice_indx])
    elseif plot_type !=2 && line_variable !=2
        ax.title = "U = " * string(velocities[vel_choice_indx])
    else
        if varu == 0
            ax.title = "κ = " * string(lambdas[lambda_or_kappa_choice_indx])
        else
            ax.title = "λ = " * string(lambdas[lambda_or_kappa_choice_indx])
        end
    end
end

if stat_type == 4 && plot_type != 1
    mag = magnitudes[1]
    hlines!(ax, 1, color = :blue, label = L"c_0 = 1"; line_options...)
    hlines!(ax, sqrt(1-mag^2), color = :red, label = L"c_0 = \sqrt{1-|Δ|^2}" ; line_options...)
end

ax.titlesize = axtitlesize
ax.ylabel = axis_labels(stat_type)
ax.xlabelsize = axlabelsize
ax.ylabelsize = axlabelsize

axislegend(labelsize = legendsize)

save(axis_title(stat_type, plot_type), fig)
